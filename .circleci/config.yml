# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    description: "A very simple command to print workflow ID"
    parameters:
      id:
        type: string
    steps:
      - run:
          name: "print workflow ID"
          command: echo <<parameters.id>>
      

jobs:
  print-workflow-id:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - print_pipeline_id:
          id: <<pipeline.id>>
          
  lint-Python:
    docker:
      # specify the version you desire here
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      # run lints!
      - run:
          name: run python lint
          command: |
            . venv/bin/activate
            pylint --disable=R,C,W1203,W1202 app.py
            
  lint-Dockerfile:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            #install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
        
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile

#################################################

  test-app:
    docker:
      # specify the version you desire here
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      # run lints!
      - run:
          name: run app.py
          command: |
            . venv/bin/activate
            pytest test_api.py

#################################################

  security-app:
    docker:
      # specify the version you desire here
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      # run lints!
      - run:
          name: run app.py
          command: |
            . venv/bin/activate
            bandit app.py --skip B104,B201
            
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar
          command: yum install -y tar gzip   
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udacity-DevOps-Capstone \
              --stack-name "back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here

            backendip=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output=text)
            echo $backendip >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: a6799e5b-dcb5-45f6-b3f3-6cb9db85f3ac" --request PUT --data $backendip https://api.memstash.io/values/backendip
            cat .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
            
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
              - "50:eb:03:41:d3:d8:1b:c8:3f:c4:c6:b5:2b:e2:23:8b"
      # attach workspace
      - attach_workspace:
            at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            URLS=$(curl -H "token: a6799e5b-dcb5-45f6-b3f3-6cb9db85f3ac" --request GET https://api.memstash.io/values/backendip)
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            echo "Start Ansible"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
            #cat configure-server.yml
      # Here's where you will add some code to rollback on failure  
            
            
            
            

workflows:
  print-workflow-workflow:
    jobs:
      - print-workflow-id
            filters:
              branches:
                only: [buff]
      - lint-Python:
            requires: [print-workflow-id]
            filters:
              branches:
                only: [main]
      - lint-Dockerfile:
            requires: [print-workflow-id]
            filters:
              branches:
                only: [main]
      - test-app:
            requires: [lint-Python, lint-Dockerfile]
            filters:
              branches:
                only: [main]
      - security-app:
            requires: [test-app]
            filters:
              branches:
                only: [main]  
                
      - deploy-infrastructure:
            #requires: [security-app]
            filters:
              branches:
                only: [main]  
                
      - configure-infrastructure:
            requires: [deploy-infrastructure]
            filters:
              branches:
                only: [main]                
